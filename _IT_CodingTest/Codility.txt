<Codility>

변수
If
Loop(for, for-in, while, switch-case)
Try-Catch
Array
List
Map

// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        int res = 2000;
        for(int i=1 ; i<A.length ; i++){
            int leftSum = 0;
            int rightSum = 0;
            int diff = 0;
            for(int j=0 ; j<A.length ; j++){
                if(j < i){
                    leftSum += A[j];    
                }
                else{
                    rightSum += A[j];
                }
            }
            diff = leftSum - rightSum;
            if(diff < 0){
                diff *= -1;
            }
            if(res >= diff){
                res = diff;
            }
        }
        
        return res;
    }
}


// you can also use imports, for example:
// import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        int res = 2000;
        int arrSum = 0;
        for(int i=0 ; i<A.length ; i++){
            arrSum += A[i];
        }
        
        int s = 0;
        for(int i=0 ; i<A.length-1 ; i++){
            s += A[i];
            int diff = s - (arrSum - s);
            if(diff < 0){
                diff *= -1;
            }
            if(res >= diff){
                res = diff;
            }
        }
        
        return res;
    }
}

permutation : 연속된 숫자 1~N // 이거면 1 아니면 0 리턴
배열 갯수 N : 1~100000
배열안의 값 : 1~1000000000

// write your code in Java SE 8
int[] counter = new int[N];
int max = 0;
int check = 0;


for(int i = 0 ; i < A.length ; i++){
	if(A[i] == N+1) max = check;
	else{
		if(counter[A[i]-1] < max)  counter[A[i]-1] = max;
		counter[A[i]-1]++;
		if(check < counter[A[i]-1]) check = counter[A[i]-1];
	}
}

for(int i = 0 ; i < counter.length ; i++) if(counter[i] < max)  counter[i] = max;
return counter;


1. A[] 1개 이상의 element(=N 1~100000)
// you can also use imports, for example:
import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A) {
        // write your code in Java SE 8
        int res = 0;
        int eastCnt = 0;
        for(int i=0; i<A.length ; i++){
            if(A[i] == 0){
                eastCnt++;
            }
            else{
                res += eastCnt * 1;
            }
        }
        
        if(res > 1000000000 || res < 0){
            return -1;
        }
        
        return res;
    }
}

HashMap<Integer, Integer> mapA = new HashMap<Integer, Integer>();
HashMap<Integer, Integer> mapC = new HashMap<Integer, Integer>();
HashMap<Integer, Integer> mapG = new HashMap<Integer, Integer>();
HashMap<Integer, Integer> mapT = new HashMap<Integer, Integer>();

int[] res = new int[P.length];
char[] c = S.toCharArray();
for(int i=0 ; i<c.length ; i++){
	if(c[i] == 'T'){
		mapT.put(i,1);
		//map.put(i,4);
	}
	if(c[i] == 'G'){
		mapG.put(i,1);
		//map.put(i,3);
	}
	if(c[i] == 'C'){
		mapC.put(i,1);
		//map.put(i,2);
	}
	if(c[i] == 'A'){
		mapA.put(i,1);
		//map.put(i,1);
	}
}
mapA.containsKey(i);

char[] c = S.toCharArray();
for(int i=0 ; i<P.length ; i++){
	for(int j=P[i] ; j<=Q[i] ; j++){
		if(c[j] == 'T'){
			res[i] = 4;
		}
		if(map3.containsKey(j)){
			res[i] = 3;
		}
		if(map2.containsKey(j)){
			res[i] = 2;
		}
		if(map1.containsKey(j)){
			res[i] = 1;
		}
	}
}

return res;



    
    private static int getMinImpactFactor(String s){
        int res = 0;
        if(s.contains("A")){
            res = 1;
        }
        else if(s.contains("C")){
            res = 2;
        }
        else if(s.contains("G")){
            res = 3;
        }
        else if(s.contains("T")){
            res = 4;
        }
        return res;
    }
