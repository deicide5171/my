------------------------------------------------------------------------------------------------
 :: WEB & Network ::
------------------------------------------------------------------------------------------------
<HTTP>
- 인터넷 통신 규약 프로토콜 // 웹 브라우저와 웹 서버 사이의 데이터 통신 규약

<Web Service>
- PC, Web Browser, Client : 서버로 원하는 데이터(텍스트, 이미지, 미디어) 요청
- HTTP Server : 요청의 정적(이미 존재하는 HTML파일 반환) / 동적(WAS에 요청전달하여 WAS가 생성해준 HTML 반환, 이때 WAS가 DB 접근할 수도 있음.) 판별 -> 응답처리

<Web Server> : Apache     // 요새는 WAS에 기능이 포함된다.
소프트웨어 : 브라우저 클라이언트로부터 HTTP 요청을 받아들이고 HTML 등의 웹페이지 문서에 반응하는 컴퓨터 프로그램(정적인 처리로 빠르고 안정성이 높다)
하드웨어 : Web Server가 설치되어 있는 컴퓨터

<Web Application Server(WAS)> : tomcat, web logic, web sphere, jeus
HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진). 동적 서버 컨텐츠를 수행. 주로 DB와 통신한다.(작업시간이 좀 걸리고 오류가 발생할수도 있다.)

<GET, POST>
- GET : URL을 통해 모든 파라미터가 전달. 길이 제한이 있음. (= Select시 사용)
- POST : 파라미터를 Body에 포함시켜서 전달. 파라미터가 사용자에게 노출되지 않고 길이 제한 없음.(= 웹 서버 내부적으로 수행(서버의 값이나 상태 변경)하는 동작에 사용)

<동기 vs 비동기>
- 동기 : 통신에 참여하는 모든 노드가 시간을 동기화해서 전송(순서대로 시간을 정해놓고 동작. 통신을 완료하거나 제한시간이 지나면 다음 동작으로 넘어감)
- 비동기 : 시간 동기를 맞추지 않는 대신 전송전에 노드간의 연결을 확인하고 맺는 과정 진행(오버헤드 발생) 후 통신

<웹사이트 연결 과정>
1. 웹 브라우저(=Client)에서 URL 입력하여 요청(=Request) -> 패킷단위로 전송 -> DNS서버에서 도메인과 IP주소 맵핑 -> 확인된 IP주소로 Redirect -> 해당 IP주소의 웹 서버에서 요청 처리(미디어자료 or 미들웨어에서 데이터 정제 or DB에서 데이터 조회) -> 결과값(미디어자료, JSON/XML 등)을 응답(=Response) -> 결과값을 웹 브라우저에 노출.

<OSI 7 : Open System Interconnection>
: 네트워킹 또는 무선통신 시스템의 기능을 설명하는 핵심 개념
7계층 - 응용 계층(Application) : 사용자에게 보여지는 부분. 즉 사용자에게 가장 가까운 계층. ex> 크롬, 파이어폭스 등의 웹 브라우저 + 스카이프, 아웃룩, 오피스 등의 응용프로그램 / FTP / Telnet
6계층 - 표현 계층(Presentation) : 응용프로그램이나 네트워크를 위해 데이터를 "표현"하는 계층. ex> 데이터의 암호화, 복호화가 이루어짐.
5계층 - 세션 계층(Session) : 2대의 기기, 컴퓨터 또는 서버간의 "대화"가 필요하면 세션(Session)을 만들어야 하는데 이 작업이 여기서 처리된다. 설정, 시스템응답대기기간, 세션 마지막에 응용프로그램 간의 종료 등의 기능 수행
4계층 - 전송 계층(Transport) : 최종 시스템 및 호스트 간의 데이터 전송 조율을 담당. 보낼 데이터의 용량과 속도, 목적지 등을 처리한다. ex> TCP(Transport Control Port)/IP(Internet Protocol), Socket, UDP
3계층 - 네트워크 계층(Network) : 네트워킹 전문가 대부분이 관심을 두고 좋아하는 라우터 기능 대부분이 여기 네트워크 계층에 자리잡는다. 다른 여러 라우터를 통한 라우팅을 비롯한 패킷 전달을 담당. IP
2계층 - 데이터 링크 계층(Data Link) : 노드 간 데이터 전송을 제공. 물리 계층의 오류 수정도 처리. MAC, LLC 계층, 스위치는 여기서 동작
1계층 - 물리 계층(Physical) : 시스템의 전기적, 물리적 표현을 나타낸다. 케이블의 종류, 무선 주파수 링크, 핀 배치, 전압, 물리 요건 등. 물리 계층에서의 네트워킹 문제는 케이블 연결여부, 라우터나 스위치 또는 컴퓨터의 전원 여부를 확인한다.
** All People Seem To Need Data Processing (A - P - S - T - N - D - P)

<쿠키, 세션>
쿠키 : 인터넷 웹사이트의 방문기록을 남겨, 사용자와 웹사이틀 매개해 주는 정보
세션 :
통신 : 사용자와 컴퓨터, 또는 두대의 컴퓨터간의 활성화된 접속을 의미.
프로그램 : 응용프로그램의 기동을 시작해서 종료 할 때까지의 시간을 가리킴
차이점 :
쿠키는 웹서버에서 웹 클라이언트(브라우저)를 통해 접속자의 하드디스크에 저장되는 정보
세션은 웹클라이언트(브라우저) Cache에 임시저장, 따라서 웹 클라이언트를 종료해도 쿠키는 사용자의 하드에 저장
세션은 종료하거나 만료시기가 지나면 서버에서 자동삭제
쿠키는 동일한 요청에 대한 값이 항상 동일하게 주어짐
세션은 매 요청마다 그 값이 변경
쿠키는 저장 값 유형이 문자열 형태만 가능
세션은 자바의 모든객체(Object)형태가 가능
쿠키는 보안에 취약, 세션은 보안에 강력

<TCP/IP>
설명 : 인터넷 표준 프로토콜로 컴퓨터의 데이터 통신을 행하기 위해서 만들어진 프로토콜 체계IP(Internet Protocol)의 핵심 프로토콜로 TCP/IP라 불린다.
근거리 통신망, 인트라넷, 인터넷에 연결된 컴퓨터간의 데이터 교환을 순서대로 에러없이 실행시켜준다.
웹브라우저가 WWW의 서버에 연결 할 때 사용되며, 이메일이나 파일전송에도 사용된다.
양뱡향 전송

<패킷>
네트워크를 통해 전송하기 쉽도록 자른 데이터의 전송단위

<2 제곱>
2^10 = 1024 = 1KB
2^16 = 65,536 = 64KB
2^20 = 1,048,536 = 1MB
2^30 = 1,073,741,824 = 1GB
2^32 = 4,294,967,296 = 4GB
2^40 = 1,099,511,627,776 = 1TB

------------------------------------------------------------------------------------------------
 :: 자료구조 & 알고리즘 ::
------------------------------------------------------------------------------------------------
빅오 표기법(Big O Notation), 시간복잡도(Time Complexity), 공간복잡도(Space Complexity)
	- O : 오더
	- O(1) : Push, Pop on Stack // Access hash table
			nO(1) = O(1)
			2*O(1) = 10*O(1) = O(1) -- 상수의 곱은 무시
	- O(log n) : Binary Search Tree Access // Search, Insertion, Deletion
	- O(n) : Loop // Traverse Tree // Traverse Linked List
	- O(nlog n) : Quick Sort, Merge Sort, Heap Sort
	- O(n^2) : 이중 Loop // Insertion Sort // Bubble Sort // Selection Sort

------------------------------------------------------------------------------------------------
 :: OOP (Feat. Java) ::
------------------------------------------------------------------------------------------------
<Object-Oriented Programming(OOP)> => java.txt 확인
- VM(Virtual Machine) : 모든 OS에서 Java 구동 가능
- GC(Garbage Collection) : 개발자 대신 메모리(Heap 영역)를 관리. 메모리 재사용
메모리
- 메서드영역 : static 변수, 전역변수, 코드에 사용되는 Class 정보
- 스택(Stack) : 지역변수, 함수(매서드) LIFO 먼저들어온게 젤 마지막에 사용됨.
- 힙(Heap) : new 연산자로 동적할당된 객체들을 저장 // 가비지 컬렉션에 의해 메모리 관리됨.

- OOP(Object-Oriented Programming) : 객체 지향 프로그래밍(캡슐화, 상속, 다형성, 추상화(=인터페이스)) // 상속을 통한 중복제거, 캡슐화를 통한 정보 은닉화, 오버로딩&오버라이딩, 추상화&인터페이스를 통한 개발 집중 등등
- 메서드 : 반복작업을 메서드화

- Class : 변수 + 메서드 // 아직 메모리에 할당되지 않은 상태(판)
- Object : Class 기반으로 객체 생성 // Class에 정의 된 정보로 메모리에 할당(판에서 찍어낸 물건)

캡상추다
- 캡슐화 : 잘못된 사용으로 인해 객체가 손상되지 않도록 객체의 필드와 메소드를 하나로 묶고, 실제 구현내용을 외부에 감춘다. public private 접근 제한자 적용. getter setter로 접근 가능
- 상속 : 부모 클래스의 기능을 그대로 사용가능한 자식 클래스 생성 가능 // 다중 상속은 불가능
	- 이유1 : 검증된 클래스를 상속하여 빠르게 개발 가능
	- 이유2 : 다양한 객체를 하나로 통일 가능
- 추상화(abstract) : 껍데기 클래스. 꼭 부모메서드를 재정의(Override)하여 사용해야한다.	// 일반상속과 큰 차이 없다. 정답도 없다. 자식클래스에서 재정의 필요하다면 추상클래스 사용. 그렇지 않으면 일반클래스 상속 사용.
- 다형성 : 인터페이스를 이용하여 여러개의 껍데기를 만들고 껍데기의 기능은 따로 구현. 하나의 본체에 여러개의 껍데기를 적용하여 활용가능
	- Override : 상속받은 메서드를 재정의하여 사용
	- Overload : 클래스내에 메서드 이름은 같고 입력 매개변수 정보(개수, 타입)는 다르게 선언 가능

------------------------------------------------------------------------------------------------
 :: Spring Framework ::
------------------------------------------------------------------------------------------------
1. 스프링이란? : Java언어를 기반으로, 동적인 웹 사이트 개발을 위한 여러 가지 서비스 제공. 
	- Spring Container : 설정정보(XML or @)를 참고로 해서 어플리케이션을 구성하는 오브젝트를 생성하고 관리(=객체의 생명주기 관리)한다.
	- IoC(Inversion of Control) = 컨테이너 : 제어의 역전. 오브젝트의 제어 권한을 Spring Container에게 위임하는 방식. 개발자는 Class만 정의하고 사용. 생성, 파괴등 생명주기는 Spring Container가 알아서 처리.
	- DI(Dependency Injection) : 의존성 주입. 설정정보(XML or @) 기반으로 오브젝트간의 의존성 주입. A객체에서 사용되는 B, C 객체를 정의. A객체 생성시 B, C객체를 같이 생성해서 엮어줌. IoC 컨테이너가 알아서 연결해줌.
	- 추상화(Abstract(추상, 일반 메서드 다 사용가능) vs Interface(오로지 추상메서드랑 상수만 사용, 다중상속가능, 상속의 관계가 없는 클래스간 서로 공통되는 로직을 구현하여 쓸 수 있음.)) : 하위 시스템의 공통기능을 뽑아내서 분리하여 껍데기, 내용(실제 기능 구현) 구조로 개발 // 재사용성 증가, 현재 개발중인 부분에 집중
	- AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍. 핵심 비지니스 로직과 공통 모듈로 구분. 핵심 비지니스 로직을 건드리지 않고 공통된 기능을 모듈화하여 관리하고 적용. Java의 상속기능만 사용했을 시, 발생하는 문제 및 한계점을 극복하기 위함. (= 부모 자식 관계 상관없이 여러 객체에서 사용해야만 하는 공통적인 기능이 있을 경우, AOP 적용)
	=> 로그, 트랜잭션, 자원해제, 성능테스트 메서드

AOP(Aspect Oriented Programming) : 공통기능을 모든 모듈에 적용하기 위함. ex> SSO, Log, Check, 특정 메소드 실행&종료시간(=경과시간) 체크 등등에 활용
	- Aspect : 공통 기능 (advice + joinpoint + pointcut)
	- Advice : Aspect의 기능 자체 (종류 : before(메소드 실행 전) // around(메소드 전/후, exception 발생시) // after-returning(정상 메소드 실행후) // after-throwing(메소드 실행중 exception 발생시) // after(메소드 실행후 무조건 발생) **동작방식
	- Joinpoint : Advice를 적용해야 되는 부분(ex. 필드, 메소드)(스프링에서는 메소드만 해당) **동작방식이 적용된 부분
	- Pointcut : Joinpoint의 부분으로 실제로 Advice가 적용된 부분 **적용위치
	- Weaving : Advice를 핵심 기능에 적용하는 행위 **적용행위
	
	AOP 구현방법 : 호출부(Client) -> Proxy(대행) -> Target(핵심기능)
		1. XML 이용
			1. 의존 설정(pom.xml) : org-aspectj
			2. xml 설정 : <bean/> <aop:config></aop:config>
			3. 공통 기능 클래스 생성 필요.
			
			*. AOP 라이브러리를 받아서 사용. 공통 기능 클래스 생성 -> 빈 생성 -> AOP Config -> 어떤 공통 기능을 어떤 패키지 범위에 있는 메소드들에 적용한다고 설정 // 특정기능 실행전, 실행후 등 시점 선택가능
		2. @Aspect 이용 
			1. 의존 설정(pom.xml) : org-aspectj
			2. @Aspect 를 이용한 클래스 제작
			3. xml에 <aop:aspectj-autoproxy /> 설정  -> 이걸해야 @Aspect 인식하여 동작 가능
			
		*. aspectj Pointcut 표현식
			execution() // within() // bean()


<MVC : Model View Controller>
데이터 혹은 데이터를 처리하는 영역 / 결과 화면(웹페이지)을 만드는 영역 / 클라이언트의 요청(Request)를 처리하는 영역(= 모델과 뷰사이의 중간연결)

<Spring 요청처리 과정>
1. 웹 Application 실행되면 Tomcat(WAS)에 의해 web.xml이 로딩
2. web.xml에 등록되어 있는 ContextLoaderListener(Java Class)가 생성
3. ContextLoaderListener 클래스는 ServletContextListener 인터페이스를 구현하고 있으며, ApplicationContext를 생성하는 역할을 수행한다.
4. 생성된 ContextLoaderListener는 root-context.xml을 로딩
5. Client Request
6. DispatcherServlet(Servlet)이 생성. FrontController 역할을 수행한다.
7. HandlerMapping, ViewResolver 같은 PageContoller에서 요청을 분석하여 어떤 응답을 할지 결정
8. 7번의 응답 결정 과정에서 DispatcherServlet은 servlet-context.xml을 로딩 -> @Controller 찾기 -> @RequestMapping을 통해 요청을 처리할 메서드 결정 -> Service에 요청 -> 비즈니스 처리 -> DAO에서 DB처리 -> 결과값 VO에 담아서 리턴 -> VO + View 결과물을 DispatcherServlet에게 전달
9. Client Response

*. Filter 서블릿단에서 제일 먼저, 제일 나중에 실행 // web.xml에 정의됨(init, dofilter, destory)
*. Interceptor 서블릿단에서 실행, 2번째로 실행 // xml or java 소스로 설정(preHandler, postHandler, afterCompletion)
*. AOP 메서드단에서 실행, 3번째로 실행 // xml or java 소스로 설정(pointcut으로 @after, @before, @around 등 위치를 지정하여 자유롭게 메서드 생성가능)

<Spring Cloud Data Flow>
1. 지속적인 배포가 중요한 시점.
2. Conway's Law : 개발자 팀의 형태에 따라 서비스의 형태가 결정된다.
3. 여러 개발자들이 모여서 작업 -> 하나의 통 서비스
4. 4~7명 단위로 개발자가 팀으로 운영됨 -> 기능 별로 쪼개진 마이크로서비스 // 요청을 구분짓는 개념이 필요함(API Gateway), 중간단계의 통신 개념이 필요함(API, RabbitMQ)
5. 지속적으로 배포(자동으로)한 결과에 대한 DB 통계 결과를 빠르게 확인하여 지속적인 좋은 서비스 제공.
6. Data를 처리하는 Flow를 설정값이 정의
7. MicroService들이 6번의 Flow를 따라 HTTP 요청을 처리한다. MicroService들은 RabbitMQ 또는 kafka 같은 도구를 통해 데이터를 주고 받아 처리한다.
ex> 데이터 처리결과를 복제된 DB에 쌓기 -> 분석 -> 결과통계 등 머신러닝처리

------------------------------------------------------------------------------------------------
 :: RESTful API ::
------------------------------------------------------------------------------------------------
<REST // API>
- REST : 인터넷 상의 컴퓨터 시스템간 상호 운용성을 제공하는 방법 중 하나 (= 인터넷을 통해 컴퓨터 시스템간을 연결해주는 방법을 정의해놓은 네트워크 아키텍처 // 네트워크간 연동 방식 개념 // 프로토콜 x) ex> 이메일전송, 푸쉬
- 제약조건을 준수해야 RESTful 하다라고 한다.
	- 클라이언트/서버 구성, 서버는 API를 제공하고 비지니스 로직 처리와 데이터 저장을 책임. 클라이언트는 사용자인증, 상태(세션, 로그인정보)관리와 서버 리소스 요청을 책임. 상호 의존성을 줄이는 형태로 개발해야함
	- 무상태(Stateless) : REST 서버는 작업을 위한 상태정보(세션, 쿠키 등)을 관리하지 않아야 함. 병렬로 구성한 상태에서 하나가 고장나도 시스템에 영향없이 관리 및 업데이트 가능한 형태
	- 캐쉬(Cacheable) : HTTP 웹 표준으로 HTTP가 가진 캐싱 기능이 적용됨
	- 계층화(Layered system) : 서버를 다중 계층으로 구성될 수 있음. 비지니스 로직을 수행하는 API와 서버와 그 앞단에서 사용자 인증, 암호화, 로드밸렁싱 등의 계층을 추가해 구조상의 유연성 제공
	- 인터페이스 일관성(Uniform interface) : 아키텍처를 단순화하고 분리해 각 부분을 독립적으로 발전 시킬 수 있음.
- REST API : REST기반으로 서비스 API를 구현한 것. OpenAPI(누구나 사용 가능하도록 공개된 API ex>구글맵..) 마이크로 서비스로 많이 구성하여. 확장성과 재사용성을 극대화. HTTP 기반으로 구현.
- 주요 구성요소
	- 리소스 : 접근할 대상, URI를 통해 식별
	- 메소드 : 리소스에 대한 행위, 표준 HTTP 메소드에 따라 자원에 접근(생성, 조회, 수정, 삭제)
	- 메시지 : HTTP 헤더와 바디에 포함된 메시지는 메시지를 처리하기 위한 충분한 정보를 포함
	*** REST는 어떤 자원(리소스)에 어떤 행위(메소드)를 어떻게(메시지)할지 HTTP 기반으로 정해놓은 아키텍처
- 리소스(자원)
	http://api.domain.com/books/
	http://api.domain.com/books/1/
	http://api.domain.com/books/1/photo
	/(컬렉션)/(아이템)/(컬렉션)/(아이템)/.../.../
	
- 메소드(행위)
POST, GET, PUT, DELETE 생성, 조회, 수정, 삭제
URI + 메소드 = URI 정보에 대해 메소드행위를 수행한다.

- 메시지(헤더 + 바디)
JSON으로 결과 응답을 많이 하는 추세

- 응답 상태코드
200 : 정상
201 : 리소스 생성 요청 성공(POST 성공 = create 성공)
400 : 요청이 부적절함
401 : 인증되지 않은 상태에서 보호된 리소스 요청
403 : 공개되지 않은 리소스에 접근 요청(인증과 무관)
404 : 존재하지 않는 리소스 요청
406 : 지원하지 않는 미디어타입을 요청
409 : 리소스 상태에 의해 해당 요청을 수행하지 못함

------------------------------------------------------------------------------------------------
 :: Memcached 적용 방법 ::
------------------------------------------------------------------------------------------------
1. LRU(Least Recently Used) : 캐시 항목 추가를 위한 공간을 확하기 위해 캐시에서 필요없는 항목을 결정하고 제거(eviction) 알고리즘. 가장 오래된 항목들을 제거하는 알고리즘 // Linked List 형태
2. TTL(Time to Live) : 
3. RTT(Round Trip Time) : memcached 요청이 경과된 시간으로, 클라이언트로 응답이 올 때까지 클라이언트에서 서버로 가는 요청 경과 시간 포함. 요청 -> 응답까지 오는 시간
4. SLA(Service Level Agreement) : 사용자에 대한 수용할 수 있는 웹 서비스 요청 응답 시간을 유지하기 위해 허용되는 최대 RTT
5. 서버 구성 : 프론트엔드 서버와 백엔드 서버 사이에 존재
6. http Request를 가로채서 캐쉬된 값이 있는지 확인후 존재할 경우 response. 백엔드 서버 접근 or DB 접근등의 횟수를 줄여 성능향상
7. 명령어 : GET(캐시 항목 조회), STORE(캐시 항목 추가), DELETE(캐시 항목 제거)



<최종>
1. 객체지향 설계 & 웹 어플리케이션 설계 & MSA 설계
2. 클라우드 활용
3. Spring Framework, Batch, Boot, AOP
4. RESTful API, Swagger, Memcached(Cacheing), MongoDB, Batch처리, Logging처리 // 구성 및 성능 등등
5. Git, SVN, Maven, Nexus, Jenkins, Testing, 운영 + Mornitoring
6. 성능 자료구조 - 많이쓰는 대략적인
7. MQ(Message Queue) : 비동기 프로그래밍 핵심 역할, 애플리케이션과 완전 불리 가능, 일부가 실패해도 다른 전체 프로세스의 영향을 받지 않는다. 실패시 재실행가능 작업처리여부를 따로 확인 가능 다수의 프로세스들이 큐에 메시지 전송 가능. /// 배치작업, 채팅서비스, 비동기 데이터 처리, 이메일 발송, 문서 업로드, 많은 양의 프로세스 처리, 대용량 실시간 로그 처리
8. 비동기 처리 javascript Promise // java Spring Async