<Spring>
1. 스프링이란? : Java언어를 기반으로, 다양한 어플리케이션을 제작하기 위한 약속된 프로그래밍 틀
	- Spring Container : 설정정보(XML or @)를 참고로 해서 어플리케이션을 구성하는 오브젝트를 생성하고 관리한다.
	- IoC(Inversion of Control) : 제어의 역전. 오브젝트의 제어 권한을 Spring Container에게 위임. 개발자는 Class만 정의하고 사용
	- DI(Dependency Injection) : 의존성 주입. 설정정보(XML or @) 기반으로 오브젝트간의 의존성 주입. A객체에서 사용되는 B, C 객체를 정의
	- 추상화(Interface) : 하위 시스템의 공통기능을 뽑아내서 분리하여 껍데기, 내용(실제 기능 구현) 구조로 개발 // 재사용성 증가, 현재 개발중인 부분에 집중
	- AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍. 핵심 비지니스 로직과 공통 모듈로 구분. 핵심 비지니스 로직을 건드리지 않고 공통된 기능을 모듈화하여 관리하고 적용. Java의 상속기능만 사용했을 시, 발생하는 문제 및 한계점을 극복하기 위함. (= 부모 자식 관계 상관없이 여러 객체에서 사용해야만 하는 공통적인 기능이 있을 경우, AOP 적용)

2. Java (= 객체지향 언어) -> 객체 생성 필요 -> 객체 활용 -> 객체 파괴	//	객체의 생명주기 관리를 IoC 컨테이너에게 맡긴다.
3. 객체를 생성하고 조립하는 라이브러리 집합체
4. Spring 설정. Application-context.xml // properties 활용
5. AOP(Aspect Oriented Programming) : 공통기능을 모든 모듈에 적용하기 위함. ex> SSO, Log, Check, 특정 메소드 실행&종료시간(=경과시간) 체크 등등에 활용
	- Aspect : 공통 기능
	- Advice : Aspect의 기능 자체 (종류 : before(메소드 실행 전) // around(메소드 전/후, exception 발생시) // after-returning(정상 메소드 실행후) // after-throwing(메소드 실행중 exception 발생시) // after(메소드 실행후 무조건 발생)
	- Joinpoint : Advice를 적용해야 되는 부분(ex. 필드, 메소드)(스프링에서는 메소드만 해당)
	- Pointcut : Joinpoint의 부분으로 실제로 Advice가 적용된 부분
	- Weaving : Advice를 핵심 기능에 적용하는 행위
	
	AOP 구현방법 : 호출부(Client) -> Proxy(대행) -> Target(핵심기능)
		1. XML 이용
			1. 의존 설정(pom.xml) : org-aspectj
			2. xml 설정 : <bean/> <aop:config></aop:config>
			3. 공통 기능 클래스 생성 필요.
			
			*. AOP 라이브러리를 받아서 사용. 공통 기능 클래스 생성 -> 빈 생성 -> AOP Config -> 어떤 공통 기능을 어떤 패키지 범위에 있는 메소드들에 적용한다고 설정 // 특정기능 실행전, 실행후 등 시점 선택가능
		2. @Aspect 이용 
			1. 의존 설정(pom.xml) : org-aspectj
			2. @Aspect 를 이용한 클래스 제작
			3. xml에 <aop:aspectj-autoproxy /> 설정  -> 이걸해야 @Aspect 인식하여 동작 가능
			
		*. aspectj Pointcut 표현식
			execution() // within() // bean()

6. MVC(Model-View-Controller) * 7. Controller
	- Client의 모든 요청(Tomcat으로 띄운 Spring MVC Project라서 Tomcat server.xml파일 설정 기반으로 Client가 요청 URL를 입력해야한다.) -> Web.xml -> DispatcherServlet으로 보내라 -> servelt-context.xml에 설정된 <context:component-scan base-package="com.deicide5171.springmvc" /> 값을 보고 해당 패키지를 검색하여 @Controller를 찾는다.
	-> 찾은 Controller에서 Client의 요청을 확인 @RequestMapping으로 선언된 URL과 비교 -> 해당 Request에 대한 동작을 한다. Controller > Service > DAO > DB > DAO > Service > Controller > DispatcherServlet -> 요청 결과(View 페이지)를 Client에 전달 
	
	web.xml 설정
	servlet-context.xml 설정
	Maven 설정
	Controller.java 생성 (@Controller)
	View.jsp 생성 (.jsp 파일)
	@RequestMapping으로 추가
	
	*. src/main/webapp/resources/img 에 이미지 넣어야함. => servlet-context.xml <resources mapping="/resources/**" location="/resources/" />
	*. 설정된 패키지에 Controller들 넣어야함 => servlet-context.xml <context:component-scan base-package="com.deicide5171.springmvc" />
	*. src/main/webapp/WEB-INF/views 에 화면(.jsp) 넣어야함. ViewResolver 설정
	 => <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		</beans:bean>

8. Form 데이터
	: 여러개의 파라미터를 받아야하는 경우 Class를 생성하여 통으로 받는다.
	: @PathVariable을 이용하면 localhost/asdf/student/{studentId}/ => localhost/asdf/student/10/  요렇게 받아서 URL의 값을 파라미터로 활용 가능
	: httpServletRequest 객체 활용하여 httpServletRequest.getParameter("파라미터명") 으로 URL?이후 파라미터를 받아올수있다.
	: @RequestParam
9. @RequestMapping 파라미터
	: Get, Post
	: @ModelAttribute : 클래스명을 그대로 파라미터로 받아서 쓸수 있는데 @ModelAttribute를 적용하면 별명값으로 사용할 수 있다.
	: redirect 키워드 : return "redirect:abc" -> /abc 로 이동   //   return "redirect:efg" -> /efg 로 이동
10. 폼 데이터 값 검증

[실습]
1. Spring 프로젝트 생성 - Spring Legacy Project -> Spring MVC Project // 단순 Spring MVC구조가 생성된다. Default M(Model)V(JSP)C(Controller) 구조
	-> Maven Update(log4j오류시 버전 업데이트 필요, Tomcat설정 필요(server.xml에 URIEncoding, web.xml에 filter추가하여 View 페이지 한글처리), @Contoller 생성
2. Spring 프로젝트 구조분석
3. Spring 설정
4. 웹 개발을 위한 최적화 기반 구성
5. 게시판만들기
6. JDBC, Transaction, Mybatis, Spring Security
7. AOP
8. File I/O & Upload/Download
9. 이미지 보기
10. 동영상 보기
11. Bootstrap(화면 디자인)
12. GIS(OpenLayer + Naver, Google, Daum, Vworld API)
13. Graph, Chart, Jquery UI(Javascript Lib 활용)

*. Spring Rest API + Swagger
*. Multi Thread 활용
*. Batch
*. 비동기 웹 개발


<Spring Boot 2.0 reference>
Part2. Getting Started
- 설정최소화, jar/war 배포가능
- 목표 4가지 : 빠르게 기본구조 생성가능 // 기본설정을 얼마든지 요구사항에 따라 커스터마이징가능 // 제품 개발에 대한 다양한 기능 제공 // XML설정이 없어도 된다.(최소화 시킨다.)
- System Requirements : Java 8 or 9 // Spring Framework 5.0.6.RELEASE // Maven 3.2+ // Gradle 4
- Servlet Containers : 3.1+ // Tomcat8.5 // Jetty 9.4
- 설치 : spring-boot-*.jar 추가 // Maven or Gradle로 관리하면 좋다.
- Maven or Gradle 설치
- Maven <parent> spring-boot-starter-parent에 대한 pom.xml 설정을 불러와서 적용..
